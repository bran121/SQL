-- Quantifying Movie Theater Data in order to find best films, best customers, best stores, and which ones are active/inactive.

-- Finding rental duration of films and then grouping them by their rental duration, ratings, and replacement costs.
SELECT rental_duration, 
    rating, 
    replacement_cost, 
    count(film_id) AS films_with_this_rental_duration
FROM film
GROUP BY 
	  rental_duration, 
    rating, 
    replacement_cost;
    
-- Use of aggregate functions to find important film details from the Film Table.
SELECT 
		rating,
        COUNT(film_id) AS count_of_films,
        MIN(length) AS shortest_film,
        MAX(length) AS longest_film,
        AVG(length) AS average_length_film,
        SUM(length) AS total_minutes,
        AVG(rental_duration) AS average_rental_duration
FROM film;

-- More aggregate functions to find the best rental rates for each film
SELECT
        replacement_cost,
        count(film_id) AS number_of_films,
        MIN(rental_rate) AS cheapest_rental,
        MAX(rental_rate) AS most_expensive_rental,
        AVG(rental_rate) AS average_rental
FROM film
GROUP BY 
		replacement_cost;
    
    
-- Using CASE statements to bucket film lengths into categories of short, medium, or long
SELECT distinct
		length,
        CASE
			WHEN length < 60 THEN 'under 1hr'
            WHEN length BETWEEN 60 and 90 THEN '1-1.5 hrs'
            WHEN length > 90 THEN 'over 1.5 hrs'
            ELSE 'uh oh, check logic!'
		END AS film_length
	FROM film;

-- Utilizing CASE statement to find which stores are active or inactive
SELECT 
		first_name,
        last_name,
        CASE 
			WHEN store_id = 1 AND active = 1 THEN 'store 1 active'
			WHEN store_id = 1 AND active = 0 THEN 'store 1 inactive'
			WHEN store_id = 2 AND active = 1 THEN 'store 2 active'
			WHEN store_id = 2 AND active = 0 THEN 'store 2 inactive'
			ELSE 'oops check for error'
        END AS store_and_status
FROM customer;

-- Using COUNT(CASE) to mimic Excel Pivot tables and to find active/inactive stores within the database
SELECT 
		store_id,
		COUNT(CASE WHEN active = 1 THEN active ELSE NULL END) AS active,
		COUNT(CASE WHEN active = 0 THEN active ELSE NULL END) AS inactive
FROM customer
    GROUP BY 
        store_id
ORDER BY 
store_id;
    
